/* * Copyright (C) 2005-2010 Erik Nilsson, software on versionstudio point com * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */ package vibe.sound{	import flash.events.*;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.net.URLRequest;		import flash.utils.Timer;		import vibe.events.*;		    public class SoundPlayer extends EventDispatcher    {		private var _sound:Sound = null;		private var _soundChannel:SoundChannel = null;		private var _soundTransform:SoundTransform = null;		private var _progressTimer:Timer = null;		private var _position:Number = 0;		private var _dispatchedStartEvent:Boolean = false;		private var _paused:Boolean = false;				public function SoundPlayer():void		{			_soundTransform = new SoundTransform(1);			_progressTimer = new Timer(50);			_progressTimer.addEventListener(TimerEvent.TIMER,onTimer);		}				public function startSound(url:String,bufferTime:Number):void		{			if ( this.playing ) {				var position:int = _soundChannel.position;								stopSound();				dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.STOP,position));							}						_sound = new Sound();			if ( _sound==null ) {				dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.ERROR,-1));				return;			}						_dispatchedStartEvent = false;			var loaderContext:SoundLoaderContext = new SoundLoaderContext(bufferTime);			var request:URLRequest = new URLRequest(url);					            try 			{            	_sound.load(request,loaderContext);            	_soundChannel = _sound.play(0,0,_soundTransform);								if ( _soundChannel==null ) {					dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.ERROR,-1));					stopSound();					return;				}								_sound.addEventListener(Event.ID3,onId3);				_sound.addEventListener(IOErrorEvent.IO_ERROR,onIoError);				_soundChannel.addEventListener(Event.SOUND_COMPLETE,onSoundComplete);				_progressTimer.start();            }            catch (err:Error) {				dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.ERROR,-1));				stopSound();            }		}						public function pauseSound():void		{			if ( !this.playing || _paused ) {				return;			}						_progressTimer.stop();						_position = _soundChannel.position;			_soundChannel.stop();			_paused = true;						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.PAUSE,_position));		}				public function resumeSound():void		{			if ( !this.playing || !_paused ) {				return;			}						resumePosition(_position);						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.RESUME,_position));		}				public function resumePosition(position:Number)		{			if ( !this.playing ) {				return;			}									_soundChannel.stop();						if ( !_progressTimer.running ) {				_progressTimer.start();			}									_paused = false;						_soundChannel = _sound.play(position,0,_soundTransform);			_soundChannel.addEventListener(Event.SOUND_COMPLETE,onSoundComplete);		}				public function stopSound()		{			_progressTimer.stop();			_progressTimer.reset();						if ( _soundChannel!=null ) {				_soundChannel.stop();				_soundChannel = null;			}						if ( _sound!=null ) 			{				try	{					_sound.close();					_sound = null;				}				catch(err:Error) {									}			}					_paused = false;			_position = 0;		}				private function onId3(event:Event):void		{			dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.ID3,_soundChannel.position));		}						private function onIoError(event:IOErrorEvent):void		{			stopSound();						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.ERROR,-1));					}				private function onSoundComplete(event:Event):void		{			stopSound();						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.STOP,-1));		}				private function onTimer(event:TimerEvent):void		{			if ( _sound.bytesLoaded>0 && !_dispatchedStartEvent ) {				_dispatchedStartEvent = true;				dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.START,0));			}						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.PROGRESS,_soundChannel.position));		}			public function get paused():Boolean {			return _paused;		}				public function get playing():Boolean {			return _soundChannel!=null;		}				public function get sound():Sound {			return _sound;		}				public function get soundChannel():SoundChannel {			return _soundChannel;		}				public function get volume():Number {			return _soundTransform.volume;		}				public function set volume(volume:Number):void 		{			_soundTransform.volume=volume;			if ( _soundChannel!=null ) {				_soundChannel.soundTransform = _soundTransform;			}		}		}}