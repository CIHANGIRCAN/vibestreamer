/* * Copyright (C) 2005-2010 Erik Nilsson, software on versionstudio point com * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */ package vibe.controls{	import flash.geom.Rectangle;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.*;		import vibe.events.*;		    public class Slider extends MovieClip    {		private var _dragEnabled:Boolean = true;		private var _dragging:Boolean = false;		private var _handle:MovieClip = null;		private var _startX:Number = 0;		private var _startY:Number = 0;				public function init(handle:MovieClip,startValue:Number):void		{			_handle = handle;			_startX = _handle.x;			_startY = _handle.y;						this.value = startValue;						_handle.addEventListener(MouseEvent.MOUSE_DOWN,onHandleMouseDown);			_handle.addEventListener(MouseEvent.MOUSE_MOVE,onHandleMouseMove);						stage.addEventListener(MouseEvent.MOUSE_UP,onStageMouseUp);		}				private function onHandleMouseDown(event:MouseEvent):void		{			if ( _dragEnabled )			{				var rect:Rectangle = new Rectangle(_startX,_startY,					this.width-event.target.width,0);								event.target.startDrag(false,rect);								_dragging = true;								dispatchEvent(new SliderEvent(SliderEvent.DRAGSTART));			}		}				private function onHandleMouseMove(event:MouseEvent):void		{			if ( _dragging ) {				dispatchEvent(new SliderEvent(SliderEvent.CHANGE));				dispatchEvent(new SliderEvent(SliderEvent.DRAG));			}		}					private function onStageMouseUp(event:MouseEvent):void 		{			if ( _dragging ) {				stopDrag();								_dragging = false;				dispatchEvent(new SliderEvent(SliderEvent.CHANGE));				dispatchEvent(new SliderEvent(SliderEvent.DRAGEND));			}		}				public function get dragEnabled():Boolean {			return _dragEnabled;		}				public function get dragging():Boolean {			return _dragging;		}		public function get value():Number 		{			var value:Number = 0;						if ( _handle!=null )			{				value = (_handle.x-_startX)/(this.width-_handle.width);				if ( value>1 ) {					value = 1;				}			}						return value;		}				public function set dragEnabled(dragEnabled:Boolean):void		{			_dragEnabled = dragEnabled;			if ( !_dragEnabled && dragging ) {				stopDrag();				_dragging = false;			}		}				public function set value(value:Number):void 		{			if ( _handle!=null ) 			{				if ( value>1 ) {					value = 1;				}								_handle.x = _startX + (this.width-_handle.width+1)*value;				dispatchEvent(new SliderEvent(SliderEvent.CHANGE));			}		}		    }}